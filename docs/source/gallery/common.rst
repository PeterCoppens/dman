
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/common.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_common.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_common.py:


Getting Started
========================

This example describes a common use case of the ``dman`` library.
You will need to have ``numpy`` and ``rich`` installed to run this script.

.. GENERATED FROM PYTHON SOURCE LINES 11-19

Overview
---------------------------

We provide an example here of how one could approach. This example will show you

* How to integrate ``numpy`` arrays into the framework.
* How to setup an experiment modelclass.
* How to save and load from cache.

.. GENERATED FROM PYTHON SOURCE LINES 21-25

Setting up
------------------------

To setup the example we will need to following imports:

.. GENERATED FROM PYTHON SOURCE LINES 25-32

.. code-block:: default


    import dman
    from dman import tui
    import numpy as np
    import os









.. GENERATED FROM PYTHON SOURCE LINES 33-35

The first step is to describe how arrays are stored. We do so by
creating a ``storable`` type.

.. GENERATED FROM PYTHON SOURCE LINES 35-52

.. code-block:: default



    @dman.storable(name="_num__barray")
    class barray(np.ndarray):
        __ext__ = ".npy"

        def __write__(self, path):
            with open(path, "wb") as f:
                np.save(f, self)

        @classmethod
        def __read__(cls, path):
            with open(path, "rb") as f:
                res: np.ndarray = np.load(f)
                return res.view(cls)









.. GENERATED FROM PYTHON SOURCE LINES 53-61

We specify three components. First ``__ext__`` specifies the suffix added
to the created files. The ``__write__`` defines how to store the content
at a specified path and similarly ``__read__`` defines how to read
the content from a file.

It will be inconvenient to always call ``data.view(barray)`` to convert
data to the storable type. To make this more convenient we can
create a wrapper around ``recordfield``:

.. GENERATED FROM PYTHON SOURCE LINES 61-72

.. code-block:: default



    def barrayfield(**kwargs):
        def to_sarray(arg):
            if isinstance(arg, np.ndarray):
                return arg.view(barray)
            return arg

        return dman.recordfield(**kwargs, pre=to_sarray)









.. GENERATED FROM PYTHON SOURCE LINES 73-81

The callable provided through the ``pre`` argument is called whenever
a field is set in a ``modelclass``.

.. note::

    Both ``barray`` and ``barrayfield`` are implemented in ``dman.numeric``.
    We provide the details here since they are a good example on how
    to implement a ``storable`` type.

.. GENERATED FROM PYTHON SOURCE LINES 83-86

Next we want to define the experiment configuration. To do so
we use a ``modelclass`` which acts similarly to a ``dataclass``,
but it is automatically serializable.

.. GENERATED FROM PYTHON SOURCE LINES 86-96

.. code-block:: default



    @dman.modelclass(name="config")
    class Config:
        seed: int = 1234
        size: int = 20
        nsample: int = 1000
        nrepeats: int = 2









.. GENERATED FROM PYTHON SOURCE LINES 97-99

We will want to do multiple runs of some test in this example, so next
lets specify the run type.

.. GENERATED FROM PYTHON SOURCE LINES 99-113

.. code-block:: default



    @dman.modelclass(name="run", storable=True)
    class Run:
        """
        Run class
            Stores simulation data.
        """

        config: Config
        data: barray = barrayfield(default=None)
        output: barray = barrayfield(default=None)









.. GENERATED FROM PYTHON SOURCE LINES 114-127

Simple enough. We specify that the ``modelclass``
can be stored to a file using ``storable=True``. Doing so
helps with performance, since loading from files is only done
when needed.

The run contains two fields: ``data`` and ``output``. Note
that these are specified using a ``barrayfield`` (which wrapped ``recordfield``).
This has all options from the ``field`` method. We use this method since
the ``barray`` fields should be stored to a file. The ``recordfield`` makes this
clear and enables specifying things like the filename (using ``stem='<name>'``),
subdirectory (using ``subdir='<subdir>'``), etc.
We leave these unspecified in this case and leave filename selection to
the ``dman`` framework.

.. GENERATED FROM PYTHON SOURCE LINES 129-145

We will store our data in an instance of ``mruns``, which acts like
a list. File names are determined automatically based on the specified stem.

For example we can specify to store items at ``results/sim-#``
with ``#`` replaced by the number of the run.

.. code-block:: python

    content = mruns(stem='sim', subdir='results')

.. warning::

    To avoid unnecessary overhead caused by having to move files around,
    the index used in the file name is not the index in the list. Instead
    it is based on a counter that keeps track of the number of runs added.
    This matches the index until items are deleted or inserted.

.. GENERATED FROM PYTHON SOURCE LINES 148-151

Running the experiment
----------------------------------
We implement a method to run the experiment given some configuration:

.. GENERATED FROM PYTHON SOURCE LINES 151-179

.. code-block:: default



    def execute(cfg: Config):
        """
        Run a simulation based on the provided configuration.
        """
        # load the experiments from disk
        with dman.track(
            "experiment",
            default_factory=dman.mruns_factory(stem="experiment", subdir="results"),
        ) as content:

            # for type hinting (this is good practice in ``dman`` since it also
            # makes sure you imported the type you want to load).
            content: dman.mruns = content

            # if the config was run before we don't need to run again
            if len(content) > 0 and any((run.config == cfg for run in content)):
                return

            # generate data
            rng = np.random.default_rng(cfg.seed)
            data = rng.random(size=(cfg.size, cfg.nsample))
            transform = rng.standard_normal(size=(100, data.shape[0]))
            output = transform @ data
            content.append(Run(cfg, data, output))









.. GENERATED FROM PYTHON SOURCE LINES 180-206

We provide an overview of the above code segment:

1. The ``track`` command
    It specifies a file key, based on which an object will be loaded.
    If the file does not exist, it will be created based on ``default_factory``.
    Similarly to ``load`` it specifies a file key and a default value that is used when the object can
    not be loaded from the file key. Once the context exists, the file is saved automatically.

2. The ``mruns_factory`` method
     Returns a method with no arguments that returns ``mruns(stem='experiment', subdir='results')`` when called.

3. Note that we specify the loaded type.
    The interpreter can not know in advance what the loaded type will be, so we specify
    it manually. This is good practice since it makes refactoring more convenient. It also avoids
    issues caused by loading stored objects when the class definition is not imported.

4. We check if the config is new.
    To avoid re-running experiments unnecessarily we go through the list of
    experiments and check whether the config was already executed. Note that
    no data arrays are loaded from disk when doing so because of the deferred
    loading supported by default through the ``record`` system.

.. warning::

    Before running the script execute ``dman init`` in the root folder
    of your project. Files will be stored in the ``.dman`` folder created there.

.. GENERATED FROM PYTHON SOURCE LINES 209-210

We begin by clearing any existing runs

.. GENERATED FROM PYTHON SOURCE LINES 210-217

.. code-block:: default

    with dman.track(
        "experiment",
        default_factory=dman.mruns_factory(stem="experiment", subdir="results"),
    ) as content:
        content: dman.mruns = content
        content.clear()








.. GENERATED FROM PYTHON SOURCE LINES 218-230

Alternatively if you wish to remove only the most recent run you can use:

.. code-block:: python

    with dman.track(
        'experiment',
        default_factory=mruns_factory(stem='experiment', subdir='results')
    ) as content:
        content: mruns = content
        content.pop()

The files are only removed once the ``track`` context exits.

.. GENERATED FROM PYTHON SOURCE LINES 233-234

We next execute three experiments as follows:

.. GENERATED FROM PYTHON SOURCE LINES 234-238

.. code-block:: default

    execute(Config(seed=1000))
    execute(Config(seed=1024))
    execute(Config(seed=1000))








.. GENERATED FROM PYTHON SOURCE LINES 239-240

Afterwards you will see that ``.dman`` is populated as follows:

.. GENERATED FROM PYTHON SOURCE LINES 240-247

.. code-block:: default

    tui.walk_directory(
        os.path.join(dman.get_directory("experiment"), ".."),
        show_content=True,
        normalize=True,
        show_hidden=True,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üìÇ .dman/cache/examples:common
    ‚î£‚îÅ‚îÅ üìÇ experiment
    ‚îÉ   ‚î£‚îÅ‚îÅ üìÇ results
    ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÇ experiment-0
    ‚îÉ   ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÑ 324077fc-0cac-46d0-af0f-1b438b3e47b4.npy (800.1 kB)
    ‚îÉ   ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÑ 4969815f-f72f-49ee-a18f-754092bd760a.npy (160.1 kB)
    ‚îÉ   ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ üìÑ experiment.json (603 bytes)
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ {                                                            ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ   "config": {                                                ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     "_ser__type": "config",                                  ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     "_ser__content": {                                       ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "seed": 1000,                                          ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "size": 20,                                            ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "nsample": 1000,                                       ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "nrepeats": 2                                          ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     }                                                        ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ   },                                                         ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ   "data": {                                                  ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     "_ser__type": "_ser__record",                            ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     "_ser__content": {                                       ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "target": "4969815f-f72f-49ee-a18f-754092bd760a.npy",  ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "sto_type": "_num__barray"                             ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     }                                                        ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ   },                                                         ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ   "output": {                                                ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     "_ser__type": "_ser__record",                            ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     "_ser__content": {                                       ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "target": "324077fc-0cac-46d0-af0f-1b438b3e47b4.npy",  ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ       "sto_type": "_num__barray"                             ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ     }                                                        ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ   }                                                          ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îÇ }                                                            ‚îÇ
    ‚îÉ   ‚îÉ   ‚îÉ       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ üìÇ experiment-1
    ‚îÉ   ‚îÉ       ‚î£‚îÅ‚îÅ üìÑ 3beafae8-44e1-40d6-9e6c-9e1d0ba492d8.npy (800.1 kB)
    ‚îÉ   ‚îÉ       ‚î£‚îÅ‚îÅ üìÑ d21a99cf-5e53-41a5-a221-2d8e31197058.npy (160.1 kB)
    ‚îÉ   ‚îÉ       ‚îó‚îÅ‚îÅ üìÑ experiment.json (603 bytes)
    ‚îÉ   ‚îÉ           ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÉ   ‚îÉ           ‚îÇ {                                                            ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ   "config": {                                                ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     "_ser__type": "config",                                  ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     "_ser__content": {                                       ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "seed": 1024,                                          ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "size": 20,                                            ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "nsample": 1000,                                       ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "nrepeats": 2                                          ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     }                                                        ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ   },                                                         ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ   "data": {                                                  ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     "_ser__type": "_ser__record",                            ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     "_ser__content": {                                       ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "target": "d21a99cf-5e53-41a5-a221-2d8e31197058.npy",  ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "sto_type": "_num__barray"                             ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     }                                                        ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ   },                                                         ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ   "output": {                                                ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     "_ser__type": "_ser__record",                            ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     "_ser__content": {                                       ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "target": "3beafae8-44e1-40d6-9e6c-9e1d0ba492d8.npy",  ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ       "sto_type": "_num__barray"                             ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ     }                                                        ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ   }                                                          ‚îÇ
    ‚îÉ   ‚îÉ           ‚îÇ }                                                            ‚îÇ
    ‚îÉ   ‚îÉ           ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    ‚îÉ   ‚îó‚îÅ‚îÅ üìÑ experiment.json (648 bytes)
    ‚îÉ       ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÉ       ‚îÇ {                                                                    ‚îÇ
    ‚îÉ       ‚îÇ   "_ser__type": "_ser__mruns",                                       ‚îÇ
    ‚îÉ       ‚îÇ   "_ser__content": {                                                 ‚îÇ
    ‚îÉ       ‚îÇ     "stem": "experiment",                                            ‚îÇ
    ‚îÉ       ‚îÇ     "run_count": 2,                                                  ‚îÇ
    ‚îÉ       ‚îÇ     "store": [                                                       ‚îÇ
    ‚îÉ       ‚îÇ       {                                                              ‚îÇ
    ‚îÉ       ‚îÇ         "_ser__type": "_ser__record",                                ‚îÇ
    ‚îÉ       ‚îÇ         "_ser__content": {                                           ‚îÇ
    ‚îÉ       ‚îÇ           "target": "results/experiment-0/experiment.json",          ‚îÇ
    ‚îÉ       ‚îÇ           "sto_type": "run"                                          ‚îÇ
    ‚îÉ       ‚îÇ         }                                                            ‚îÇ
    ‚îÉ       ‚îÇ       },                                                             ‚îÇ
    ‚îÉ       ‚îÇ       {                                                              ‚îÇ
    ‚îÉ       ‚îÇ         "_ser__type": "_ser__record",                                ‚îÇ
    ‚îÉ       ‚îÇ         "_ser__content": {                                           ‚îÇ
    ‚îÉ       ‚îÇ           "target": "results/experiment-1/experiment.json",          ‚îÇ
    ‚îÉ       ‚îÇ           "sto_type": "run"                                          ‚îÇ
    ‚îÉ       ‚îÇ         }                                                            ‚îÇ
    ‚îÉ       ‚îÇ       }                                                              ‚îÇ
    ‚îÉ       ‚îÇ     ],                                                               ‚îÇ
    ‚îÉ       ‚îÇ     "subdir": "results"                                              ‚îÇ
    ‚îÉ       ‚îÇ   }                                                                  ‚îÇ
    ‚îÉ       ‚îÇ }                                                                    ‚îÇ
    ‚îÉ       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    ‚î£‚îÅ‚îÅ üìÑ .gitignore (33 bytes)
    ‚îÉ   ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
    ‚îÉ   ‚îÇ experiment                                                               ‚îÇ
    ‚îÉ   ‚îÇ .gitignore                                                               ‚îÇ
    ‚îÉ   ‚îÇ config.json                                                              ‚îÇ
    ‚îÉ   ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
    ‚îó‚îÅ‚îÅ üìÑ config.json (149 bytes)
        ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
        ‚îÇ {                                                                        ‚îÇ
        ‚îÇ   "_ser__type": "config",                                                ‚îÇ
        ‚îÇ   "_ser__content": {                                                     ‚îÇ
        ‚îÇ     "seed": 1234,                                                        ‚îÇ
        ‚îÇ     "size": 20,                                                          ‚îÇ
        ‚îÇ     "nsample": 1000,                                                     ‚îÇ
        ‚îÇ     "nrepeats": 2                                                        ‚îÇ
        ‚îÇ   }                                                                      ‚îÇ
        ‚îÇ }                                                                        ‚îÇ
        ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò




.. GENERATED FROM PYTHON SOURCE LINES 248-251

Note that the ``experiment`` folder is ignored
The root file is ``experiment.json`` (as specified by the key in ``track``).
Its content is as follows

.. GENERATED FROM PYTHON SOURCE LINES 251-256

.. code-block:: default


    # show contents of "experiment.json"
    with open(os.path.join(dman.get_directory("experiment"), "experiment.json"), "r") as f:
        tui.print_json(f.read())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
      "_ser__type": "_ser__mruns",
      "_ser__content": {
        "stem": "experiment",
        "run_count": 2,
        "store": [
          {
            "_ser__type": "_ser__record",
            "_ser__content": {
              "target": "results/experiment-0/experiment.json",
              "sto_type": "run"
            }
          },
          {
            "_ser__type": "_ser__record",
            "_ser__content": {
              "target": "results/experiment-1/experiment.json",
              "sto_type": "run"
            }
          }
        ],
        "subdir": "results"
      }
    }




.. GENERATED FROM PYTHON SOURCE LINES 257-265

The results are not recorded here directly. Instead we have a
``_ser__record`` that specifies the location of the json files
relative to the file ``experiment.json``.

We can see the options passed to ``mruns_factory``.
Moreover, all of the run keys are there, but their content
defers to another file through a ``_ser__record`` field.
Specifically ``'results/experiment-#/experiment.json'``.

.. GENERATED FROM PYTHON SOURCE LINES 265-275

.. code-block:: default


    # show contents of "experiment-0.json"
    with open(
        os.path.join(
            dman.get_directory("experiment"), "results", "experiment-0", "experiment.json"
        ),
        "r",
    ) as f:
        tui.print_json(f.read())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
      "config": {
        "_ser__type": "config",
        "_ser__content": {
          "seed": 1000,
          "size": 20,
          "nsample": 1000,
          "nrepeats": 2
        }
      },
      "data": {
        "_ser__type": "_ser__record",
        "_ser__content": {
          "target": "4969815f-f72f-49ee-a18f-754092bd760a.npy",
          "sto_type": "_num__barray"
        }
      },
      "output": {
        "_ser__type": "_ser__record",
        "_ser__content": {
          "target": "324077fc-0cac-46d0-af0f-1b438b3e47b4.npy",
          "sto_type": "_num__barray"
        }
      }
    }




.. GENERATED FROM PYTHON SOURCE LINES 276-279

You see that the ``experiment-#.json`` files contain
info about the files containing the ``barray`` types. These file names
are specified automatically using ``uuid4`` to guarantee uniqueness.

.. GENERATED FROM PYTHON SOURCE LINES 281-288

The Configuration File
------------------------------

Since the configuration is serializable we can also save and load it to disk.

We can create a configuration file using the ``save``
command.

.. GENERATED FROM PYTHON SOURCE LINES 288-291

.. code-block:: default


    _ = dman.save("config", Config(), cluster=False)








.. GENERATED FROM PYTHON SOURCE LINES 292-299

We add the ``cluster=False`` since the Configuration only needs a single file. So no dedicated subfolder (i.e. cluster) should be created.

You should see a ``config.json`` file appear in your ``.dman`` folder.
You can re-run the code above, after tweaking some values. The experiment
behavior changes.

We can load it from disk using

.. GENERATED FROM PYTHON SOURCE LINES 299-303

.. code-block:: default


    cfg: Config = dman.load("config", cluster=False)
    tui.print(cfg)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Config(seed=1234, size=20, nsample=1000, nrepeats=2)




.. GENERATED FROM PYTHON SOURCE LINES 304-306

It is important that ``cluster=False`` is added here as well. Note that internally
the ``track`` command uses both ``load`` and ``save``.

.. GENERATED FROM PYTHON SOURCE LINES 309-322

Specifying Storage Folder
-------------------------------

In the above experiment, the files were stored in
a folder called ``cache/examples:common``. The folder name
was created based on the script path relative to the folder in which
``.dman`` is contained. Specifically the script was located in ``examples/common.py``.

The automatic folder name generation is implemented to avoid potential overlap
between different scripts. Of course, this also means that using
``track('experiment')`` in two different scripts will save/load from different
files. If you want to use files in different scripts you can do so by specifying
a ``generator`` as follows

.. GENERATED FROM PYTHON SOURCE LINES 322-325

.. code-block:: default


    _ = dman.save("config", Config(), cluster=False, generator="demo")








.. GENERATED FROM PYTHON SOURCE LINES 326-330

Doing this, will save/load files from the folder ``.dman/demo`` no matter
what script the command is executed from. Other options are listed in :ref:`fundamentals`

For reference, the final folder structure is as follows:

.. GENERATED FROM PYTHON SOURCE LINES 330-336

.. code-block:: default

    tui.walk_directory(
        dman.get_root_path(),
        show_content=False,
        normalize=True,
        show_hidden=True,
    )




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üìÇ .dman
    ‚î£‚îÅ‚îÅ üìÇ cache
    ‚îÉ   ‚î£‚îÅ‚îÅ üìÇ dman:numeric
    ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÇ array
    ‚îÉ   ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ üìÑ array.json (686 bytes)
    ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ üìÑ .gitignore (16 bytes)
    ‚îÉ   ‚îó‚îÅ‚îÅ üìÇ examples:common
    ‚îÉ       ‚î£‚îÅ‚îÅ üìÇ experiment
    ‚îÉ       ‚îÉ   ‚î£‚îÅ‚îÅ üìÇ results
    ‚îÉ       ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÇ experiment-0
    ‚îÉ       ‚îÉ   ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÑ 324077fc-0cac-46d0-af0f-1b438b3e47b4.npy (800.1 kB)
    ‚îÉ       ‚îÉ   ‚îÉ   ‚îÉ   ‚î£‚îÅ‚îÅ üìÑ 4969815f-f72f-49ee-a18f-754092bd760a.npy (160.1 kB)
    ‚îÉ       ‚îÉ   ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ üìÑ experiment.json (603 bytes)
    ‚îÉ       ‚îÉ   ‚îÉ   ‚îó‚îÅ‚îÅ üìÇ experiment-1
    ‚îÉ       ‚îÉ   ‚îÉ       ‚î£‚îÅ‚îÅ üìÑ 3beafae8-44e1-40d6-9e6c-9e1d0ba492d8.npy (800.1 kB)
    ‚îÉ       ‚îÉ   ‚îÉ       ‚î£‚îÅ‚îÅ üìÑ d21a99cf-5e53-41a5-a221-2d8e31197058.npy (160.1 kB)
    ‚îÉ       ‚îÉ   ‚îÉ       ‚îó‚îÅ‚îÅ üìÑ experiment.json (603 bytes)
    ‚îÉ       ‚îÉ   ‚îó‚îÅ‚îÅ üìÑ experiment.json (648 bytes)
    ‚îÉ       ‚î£‚îÅ‚îÅ üìÑ .gitignore (33 bytes)
    ‚îÉ       ‚îó‚îÅ‚îÅ üìÑ config.json (149 bytes)
    ‚îó‚îÅ‚îÅ üìÇ demo
        ‚î£‚îÅ‚îÅ üìÑ .gitignore (22 bytes)
        ‚îó‚îÅ‚îÅ üìÑ config.json (149 bytes)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.750 seconds)


.. _sphx_glr_download_gallery_common.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: common.py <common.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: common.ipynb <common.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
