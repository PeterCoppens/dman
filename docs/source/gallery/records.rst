
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/records.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_records.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_records.py:


Using Records
========================

We show how to use ``records`` to serialize storables.

.. GENERATED FROM PYTHON SOURCE LINES 9-11

We will be using ``barray`` for this example so you should have ``numpy`` 
installed.

.. GENERATED FROM PYTHON SOURCE LINES 11-18

.. code-block:: default


    from tempfile import TemporaryDirectory
    import dman
    from dman.numeric import barray
    from dman import tui
    import numpy as np








.. GENERATED FROM PYTHON SOURCE LINES 19-20

By default a ``barray`` object is not serializable:

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default

    array = np.arange(3).view(barray)
    ser = dman.serialize(array)
    print(dman.sjson.dumps(ser, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
        "_ser__type": "__unserializable",
        "_ser__content": {
            "type": "<class 'dman.numeric.barray'>",
            "info": "Unserializable type: barray."
        }
    }




.. GENERATED FROM PYTHON SOURCE LINES 25-28

Note how ``dman`` does not throw an error here. This is to make sure that 
as much data is serialized as possible. You can turn on validation
by using a context. We illustrate such functionality in TODO add reference

.. GENERATED FROM PYTHON SOURCE LINES 30-40

Contexts will also be useful for storing purposes as well. Specifically
they contain the path to which files should be stored during serialization.
To make sure a ``storable`` can be serialized it should be wrapped in a 
``record``. This interface has a the following features:

  * File names and extensions can be specified manually or created automatically.
  * Sub folders can be specified.
  * Reading the object from file can be delayed until the content is accessed. 

The most basic usage is as follows:

.. GENERATED FROM PYTHON SOURCE LINES 40-48

.. code-block:: default


    dir = TemporaryDirectory()
    base = dir.name
    ctx = dman.context(base)
    rec = dman.record(array)
    ser = dman.serialize(rec, context=ctx)
    print(dman.sjson.dumps(ser, indent=4))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
        "_ser__type": "_ser__record",
        "_ser__content": {
            "target": "1d97a39b-78dc-4bec-bbc1-733ad079112d.npy",
            "sto_type": "_num__barray"
        }
    }




.. GENERATED FROM PYTHON SOURCE LINES 49-51

You can see that the result of serialization now provides a pointer to 
the file where the array is stored. We can see that the file exists:

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default


    tui.walk_directory(base)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üìÇ /tmp/tmpvgeuk1of
    ‚îó‚îÅ‚îÅ üìÑ 1d97a39b-78dc-4bec-bbc1-733ad079112d.npy (152 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 55-56

And we can load its content again

.. GENERATED FROM PYTHON SOURCE LINES 56-60

.. code-block:: default


    rec = dman.deserialize(ser, context=ctx)
    print(rec)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Record(UL[_num__barray], target=1d97a39b-78dc-4bec-bbc1-733ad079112d.npy)




.. GENERATED FROM PYTHON SOURCE LINES 61-65

Note how the record specifies that it contains a ``_num__barray``
which is the name for the storable type. However it also specifies ``UL``
implying that the file has not been loaded. We can load it by accessing 
the ``content`` field:

.. GENERATED FROM PYTHON SOURCE LINES 65-70

.. code-block:: default


    array = rec.content
    print(array)
    print(rec)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0 1 2]
    Record(_num__barray, target=1d97a39b-78dc-4bec-bbc1-733ad079112d.npy)




.. GENERATED FROM PYTHON SOURCE LINES 71-76

Now the record no longer specifies that the ``content`` is unloaded.
Also observe that the file name is still the same as the one
specified in the original record. This means that when serializing 
again the old file will be overwritten instead of creating a new one. 
We can also remove the file:

.. GENERATED FROM PYTHON SOURCE LINES 76-81

.. code-block:: default


    dman.remove(rec, context=ctx)
    tui.walk_directory(base)
    dir.cleanup()   # clean temporary directory





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    üìÇ /tmp/tmpvgeuk1of




.. GENERATED FROM PYTHON SOURCE LINES 82-129

It is possible to be more precise when specifying a ``record``.
To give an overview of the options available when creating 
a record we provide its documentation:


.. autofunction:: dman.record
    :noindex:


The way file names are specified is left flexible for internal use, 
but is hence somewhat complex. We list examples below.

  ================================================       =========================
  options                                                 target
  ================================================       =========================
  ``stem='test'``                                         ``./test``
  ``stem='test', suffix='.txt'``                          ``./test.txt``
  ``name='test.txt'``                                     ``./test.txt``
  ``name='test.txt', subdir='dir'``                       ``./dir/test.txt``
  ``name='test.txt', stem='test', suffix='.txt'``         ``ValueError``
  ================================================       =========================


.. note::
    It is also possible to automatically determine the ``suffix`` based 
    on the class.


    .. code-block:: python

        @storable(name='manual')
        class ManualFile:
            __ext__ = '.obj'
            ...


    So if only a ``stem=test`` is specified the target will automatically become ``test.obj``. 
    If a ``suffix`` is specified anyway, then the one specified through ``__ext__`` 
    is overridden. 

    When a ``storable`` is automatically created from a ``dataclass`` or a ``serializable``
    the ``suffix`` will be set to ``.json`` by default. 


.. warning::
    Be careful specifying the ``stem`` of a file. It often makes sense
    to omit it and leave the selection up to the ``record``. That way you
    will not accidentally re-use existing files. TODO reference to guide?


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.329 seconds)


.. _sphx_glr_download_gallery_records.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: records.py <records.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: records.ipynb <records.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
