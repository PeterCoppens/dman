
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/fundamentals/example3_models.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gallery_fundamentals_example3_models.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_fundamentals_example3_models.py:


Model Types
========================

The objects you will use most frequently in ``dman`` are models. 

.. GENERATED FROM PYTHON SOURCE LINES 9-17

Modelclass
----------------------
We start with the most flexible model type, the ``modelclass``.
Like all models it extends a classical Python class to handle storables.
Internally it uses ``record`` instances to do so. Hence reading up
on those in :ref:`sphx_glr_gallery_fundamentals_example2_records.py`
could be helpful. Defining a ``modelclass`` is similar to defining a
``dataclass``. We will be creating one to store numpy arrays.

.. GENERATED FROM PYTHON SOURCE LINES 17-32

.. code-block:: default


    import dman
    from dman.numeric import sarray, barray
    import numpy as np

    dman.log.default_config(level=dman.log.WARNING)


    @dman.modelclass
    class Container:
        label: str
        points: sarray[int]
        values: barray









.. GENERATED FROM PYTHON SOURCE LINES 33-34

We will be working in a temporary directory

.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: default

    from tempfile import TemporaryDirectory

    base = TemporaryDirectory().name








.. GENERATED FROM PYTHON SOURCE LINES 39-40

We can serialize the container like any other serializable type.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: default

    container = Container("experiment", np.arange(5), np.random.randn(4))
    dman.save("container", container, base=base)
    dman.tui.walk_directory(dman.mount("container", base=base), show_content=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/container
    ┣━━ 📄 7cbb0c83-dc1a-4a63-b2e1-17107209fe1e.npy (160 bytes)
    ┗━━ 📄 container.json (444 bytes)
         ────────────────────────────────────────────────────────────────────────── 
          {                                                                         
            "_ser__type": "Container",                                              
            "_ser__content": {                                                      
              "label": "experiment",                                                
              "points": {                                                           
                "_ser__type": "_num__sarray",                                       
                "_ser__content": "[0, 1, 2, 3, 4]"                                  
              },                                                                    
              "values": {                                                           
                "_ser__type": "_ser__record",                                       
                "_ser__content": {                                                  
                  "target": "7cbb0c83-dc1a-4a63-b2e1-17107209fe1e.npy",             
                  "sto_type": "_num__barray"                                        
                }                                                                   
              }                                                                     
            }                                                                       
          }                                                                         
         ────────────────────────────────────────────────────────────────────────── 




.. GENERATED FROM PYTHON SOURCE LINES 45-47

Note that the contents of the container are serialized as if it were a dataclass.
However the ``barray`` has been replaced by a record, pointing to a file.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default

    container: Container = dman.load("container", base=base)
    dman.tui.pprint(dman.record_fields(container))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
    │   'values': Record(UL[_num__barray], target=7cbb0c83-dc1a-4a63-b2e1-17107209fe1e.npy)
    }




.. GENERATED FROM PYTHON SOURCE LINES 51-53

This record is not preloaded, so the value of the barray will only be loaded
when the field is accessed.

.. GENERATED FROM PYTHON SOURCE LINES 53-56

.. code-block:: default

    print(container.values)
    dman.tui.pprint(dman.record_fields(container))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [0.66948844 0.55365967 0.03692028 0.99875648]
    {
    │   'values': Record(_num__barray, target=7cbb0c83-dc1a-4a63-b2e1-17107209fe1e.npy)
    }




.. GENERATED FROM PYTHON SOURCE LINES 57-60

So we know that the modelclass has an internal notion of records.
We can use this to specify the target of the ``barray``.
The most configurable option is to just set the record manually

.. GENERATED FROM PYTHON SOURCE LINES 60-65

.. code-block:: default


    container.values = dman.record(np.random.randn(5).view(barray), stem="barray")
    dman.save("container", container, base=base)
    dman.tui.walk_directory(dman.mount("container", base=base), show_content=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/container
    ┣━━ 📄 barray.npy (168 bytes)
    ┗━━ 📄 container.json (414 bytes)
         ────────────────────────────────────────────────────────────────────────── 
          {                                                                         
            "_ser__type": "Container",                                              
            "_ser__content": {                                                      
              "label": "experiment",                                                
              "points": {                                                           
                "_ser__type": "_num__sarray",                                       
                "_ser__content": "[0, 1, 2, 3, 4]"                                  
              },                                                                    
              "values": {                                                           
                "_ser__type": "_ser__record",                                       
                "_ser__content": {                                                  
                  "target": "barray.npy",                                           
                  "sto_type": "_num__barray"                                        
                }                                                                   
              }                                                                     
            }                                                                       
          }                                                                         
         ────────────────────────────────────────────────────────────────────────── 




.. GENERATED FROM PYTHON SOURCE LINES 66-87

.. note::
      Note that the old file has been removed automatically, since the record
      tracking it has been removed. This avoids cluttering your
      ``.dman`` directory with untracked files. We could turn this auto cleaning
      behavior off as follows:

      .. code-block:: python

          dman.params.model.auto_clean = False


When specifying the record we had to manually convert a numpy array to
a ``barray``. This happens automatically in the ``modelclass``. You can use
the ``dman.register_preset`` method to do this for your own types.

.. autofunction:: dman.register_preset
    :noindex:

It will be useful to access the record configuration in other ways.
After all, for most instances of the modelclass we likely want the same
file names. Here the ``recordfield`` comes in.

.. GENERATED FROM PYTHON SOURCE LINES 88-97

.. code-block:: default



    @dman.modelclass
    class Container:
        label: str
        points: sarray[int]
        values: barray = dman.recordfield(stem="barray")









.. GENERATED FROM PYTHON SOURCE LINES 98-99

We can see that the stem has been adjusted.

.. GENERATED FROM PYTHON SOURCE LINES 99-103

.. code-block:: default

    container = Container("experiment", np.arange(5), np.random.randn(4))
    dman.save("container", container, base=base)
    dman.tui.walk_directory(dman.mount("container", base=base), show_content=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/container
    ┣━━ 📄 barray.npy (160 bytes)
    ┗━━ 📄 container.json (414 bytes)
         ────────────────────────────────────────────────────────────────────────── 
          {                                                                         
            "_ser__type": "Container",                                              
            "_ser__content": {                                                      
              "label": "experiment",                                                
              "points": {                                                           
                "_ser__type": "_num__sarray",                                       
                "_ser__content": "[0, 1, 2, 3, 4]"                                  
              },                                                                    
              "values": {                                                           
                "_ser__type": "_ser__record",                                       
                "_ser__content": {                                                  
                  "target": "barray.npy",                                           
                  "sto_type": "_num__barray"                                        
                }                                                                   
              }                                                                     
            }                                                                       
          }                                                                         
         ────────────────────────────────────────────────────────────────────────── 




.. GENERATED FROM PYTHON SOURCE LINES 104-106

Specifying stems like this comes at a risk however. If we save two instances
of ``Container`` to the same folder, the ``barray.npy`` file will be reused.

.. GENERATED FROM PYTHON SOURCE LINES 106-111

.. code-block:: default


    c1 = Container("experiment", np.arange(5), np.random.randn(4))
    c2 = Container("experiment", np.arange(5), np.random.randn(4))
    _ = dman.save("list", [c1, c2], base=base)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [01/04/23 10:12:23] WARNING  [@list.Container.Record | fs]:          path.py:399
                                 Overwritten previously stored object at            
                                 target "barray.npy".                               




.. GENERATED FROM PYTHON SOURCE LINES 112-118

By default ``dman`` gives a warning and then overrides the file.
This implies that you should change your file hierarchy.
Later we will show how to do so correctly. You can also configure
``dman`` to resolve this issue in other ways.

One option is to automatically add an index to the file whenever this happens.

.. GENERATED FROM PYTHON SOURCE LINES 118-124

.. code-block:: default

    dman.params.store.on_retouch = "auto"
    c1 = Container("experiment", np.arange(5), np.random.randn(4))
    c2 = Container("experiment", np.arange(5), np.random.randn(4))
    _ = dman.save("list", [c1, c2], base=base)
    dman.tui.walk_directory(dman.mount("list", base=base))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/list
    ┣━━ 📄 barray.npy (160 bytes)
    ┣━━ 📄 barray0.npy (160 bytes)
    ┗━━ 📄 list.json (971 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 125-128

Other options are
  - ``'quit'``: The serialization process is cancelled.
  - ``'prompt'``: Prompt the user for a file name.

.. GENERATED FROM PYTHON SOURCE LINES 130-132

The ``recordfield`` has all the options of ``field`` and ``record`` combined.
Feel free to experiment with them. We can also configure stems globally.

.. GENERATED FROM PYTHON SOURCE LINES 132-148

.. code-block:: default



    @dman.modelclass(store_by_field=True)
    class Container:
        label: str
        points: sarray[int]
        values: barray


    container = Container("experiment", np.arange(5), np.random.randn(4))
    dman.save("fields", container, base=base)
    dman.tui.walk_directory(
        dman.mount("fields", base=base),
    )






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/fields
    ┣━━ 📄 fields.json (414 bytes)
    ┗━━ 📄 values.npy (160 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 149-159

The ``modelclass`` decorator has all the options that ``dataclass``
has and some additional ones. 

.. autofunction:: dman.modelclass
    :noindex:

We provide examples of some of the more advanced features at work below

**1. subdirectories**:
We showcase how subdirectories are determined in a ``modelclass``.

.. GENERATED FROM PYTHON SOURCE LINES 159-168

.. code-block:: default


    @dman.modelclass(cluster=True, subdir='data', store_by_field=True)
    class Container:
        root: barray = dman.recordfield(default_factory=lambda: np.ones(3))
        inner: barray = dman.recordfield(default_factory=lambda: np.ones(3), subdir='override')

    dman.save('subdirectories', Container(), base=base)
    dman.tui.walk_directory(dman.mount('subdirectories', base=base))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/subdirectories
    ┣━━ 📂 data
    ┃   ┗━━ 📂 root
    ┃       ┗━━ 📄 root.npy (152 bytes)
    ┣━━ 📂 override
    ┃   ┗━━ 📄 inner.npy (152 bytes)
    ┗━━ 📄 subdirectories.json (477 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 169-171

**2. compact**:
We showcase how compact works. Note how no types are mentioned.

.. GENERATED FROM PYTHON SOURCE LINES 171-181

.. code-block:: default


    @dman.modelclass(compact=True)
    class Person:
        name: str = 'Cave Johnson'
        age: int = 43
        location: sarray = dman.field(default_factory=lambda: np.array([3.0, 5.0, -100.0]))

    dman.tui.print_serializable(Person())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
      "_ser__type": "Person",
      "_ser__content": {
        "name": "Cave Johnson",
        "age": 43,
        "location": "[3.0, 5.0, -100.0]"
      }
    }




.. GENERATED FROM PYTHON SOURCE LINES 182-184

**3. skipping serialization**:
One can designate certain fields to not be serialized.

.. GENERATED FROM PYTHON SOURCE LINES 184-199

.. code-block:: default


    @dman.modelclass
    class Adder:
        __no_serialize__ = ['ans']
        x: int
        y: int
        ans: int = None

        def eval(self):
            self.ans = self.x + self.y

    add = Adder(3.0, 5.0)
    add.eval()
    dman.tui.print_serializable(add)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    {
      "_ser__type": "Adder",
      "_ser__content": {
        "x": 3.0,
        "y": 5.0
      }
    }




.. GENERATED FROM PYTHON SOURCE LINES 200-204

**4. deciding between storing and serializing**:
Some objects can be both serialized and stored. This is how you can choose 
which option to use. We also showcase some other advanced features, like storable 
modelclasses and presets.

.. GENERATED FROM PYTHON SOURCE LINES 204-228

.. code-block:: default


    # This class is a storable and a serializable
    @dman.modelclass(storable=True)
    class Fragment:
        value: str

    # Presets can be used to automatically convert strings to fragments.
    dman.register_preset(
        Fragment, lambda obj: Fragment(obj) if isinstance(obj, str) else obj
    )

    # Specify fragment fields in a variety of ways.
    @dman.modelclass(compact=True, store_by_field=True)
    class Fragmenter:
        frag0: Fragment = dman.recordfield()
        frag1: Fragment = dman.field()
        frag3: Fragment
        frag4: Fragment = dman.serializefield()


    dman.save('fragmenter', Fragmenter('stored', 'also stored', 'stored too', 'serialized'), base=base)
    dman.tui.walk_directory(dman.mount('fragmenter', base=base), show_content=True)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/fragmenter
    ┣━━ 📄 frag0.json (25 bytes)
    ┃    ────────────────────────────────────────────────────────────────────────── 
    ┃     {                                                                         
    ┃       "value": "stored"                                                       
    ┃     }                                                                         
    ┃    ────────────────────────────────────────────────────────────────────────── 
    ┣━━ 📄 frag1.json (30 bytes)
    ┃    ────────────────────────────────────────────────────────────────────────── 
    ┃     {                                                                         
    ┃       "value": "also stored"                                                  
    ┃     }                                                                         
    ┃    ────────────────────────────────────────────────────────────────────────── 
    ┣━━ 📄 frag3.json (29 bytes)
    ┃    ────────────────────────────────────────────────────────────────────────── 
    ┃     {                                                                         
    ┃       "value": "stored too"                                                   
    ┃     }                                                                         
    ┃    ────────────────────────────────────────────────────────────────────────── 
    ┗━━ 📄 fragmenter.json (430 bytes)
         ────────────────────────────────────────────────────────────────────────── 
          {                                                                         
            "_ser__type": "Fragmenter",                                             
            "_ser__content": {                                                      
              "frag0": {                                                            
                "target": "frag0.json",                                             
                "sto_type": "Fragment"                                              
              },                                                                    
              "frag1": {                                                            
                "target": "frag1.json",                                             
                "sto_type": "Fragment"                                              
              },                                                                    
              "frag3": {                                                            
                "target": "frag3.json",                                             
                "sto_type": "Fragment"                                              
              },                                                                    
              "frag4": {                                                            
                "value": "serialized"                                               
              }                                                                     
            }                                                                       
          }                                                                         
         ────────────────────────────────────────────────────────────────────────── 




.. GENERATED FROM PYTHON SOURCE LINES 229-236

Model List
--------------------------

After modelclasses we have some model type equivalents of basic Python types. 
The first of which is the model list or :class:`mlist`. These are lists that 
can contain storables using records as is the case with modelclasses.
They are used automatically by ``dman``. 

.. GENERATED FROM PYTHON SOURCE LINES 236-245

.. code-block:: default


    a = np.ones(3).view(dman.barray)
    b = np.zeros(3).view(dman.barray)
    c = np.arange(3).view(dman.barray)

    lst = [a, b]
    dman.save('lst', lst, base=base)
    dman.tui.walk_directory(dman.mount('lst', base=base), show_content=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/lst
    ┣━━ 📄 943f15de-c92d-4ef3-b898-71b84268438a.npy (152 bytes)
    ┣━━ 📄 b05c7c45-dada-497c-891a-8cda62b64098.npy (152 bytes)
    ┗━━ 📄 lst.json (591 bytes)
         ────────────────────────────────────────────────────────────────────────── 
          {                                                                         
            "_ser__type": "_ser__mlist",                                            
            "_ser__content": {                                                      
              "store": [                                                            
                {                                                                   
                  "_ser__type": "_ser__record",                                     
                  "_ser__content": {                                                
                    "target": "943f15de-c92d-4ef3-b898-71b84268438a.npy",           
                    "sto_type": "_num__barray"                                      
                  }                                                                 
                },                                                                  
                {                                                                   
                  "_ser__type": "_ser__record",                                     
                  "_ser__content": {                                                
                    "target": "b05c7c45-dada-497c-891a-8cda62b64098.npy",           
                    "sto_type": "_num__barray"                                      
                  }                                                                 
                }                                                                   
              ]                                                                     
            }                                                                       
          }                                                                         
         ────────────────────────────────────────────────────────────────────────── 




.. GENERATED FROM PYTHON SOURCE LINES 246-247

If we load the list from disk we can see that its type has changed.

.. GENERATED FROM PYTHON SOURCE LINES 247-250

.. code-block:: default

    lst: dman.mlist = dman.load('lst', base=base)
    print(type(lst))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'dman.model.modelclasses.mlist'>




.. GENERATED FROM PYTHON SOURCE LINES 251-252

The internal records can be accessed as follows:

.. GENERATED FROM PYTHON SOURCE LINES 252-255

.. code-block:: default

    for v in lst.store:
        print(v)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Record(UL[_num__barray], target=943f15de-c92d-4ef3-b898-71b84268438a.npy)
    Record(UL[_num__barray], target=b05c7c45-dada-497c-891a-8cda62b64098.npy)




.. GENERATED FROM PYTHON SOURCE LINES 256-257

You can directly configure a record using the ``record`` method.

.. GENERATED FROM PYTHON SOURCE LINES 257-261

.. code-block:: default

    lst.record(c, stem='c')
    dman.save('lst', lst, base=base)
    dman.tui.walk_directory(dman.mount('lst', base=base))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/lst
    ┣━━ 📄 943f15de-c92d-4ef3-b898-71b84268438a.npy (152 bytes)
    ┣━━ 📄 b05c7c45-dada-497c-891a-8cda62b64098.npy (152 bytes)
    ┣━━ 📄 c.npy (152 bytes)
    ┗━━ 📄 lst.json (805 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 262-264

If you want a storable version of an :class:`mlist` you can use :class:`smlist`.
Beyond being storable it acts identical to :class:`mlist` in every way.

.. GENERATED FROM PYTHON SOURCE LINES 266-269

Often you want to specify file names for the internal records incrementally.
Using the ``record`` method each time is not convenient however. 
Hence :class:`mruns` (and :class:`smruns`) are provided, which do so automatically.

.. GENERATED FROM PYTHON SOURCE LINES 269-274

.. code-block:: default


    runs = dman.mruns([a, b, c], stem='run', store_subdir=False)
    dman.save('runs', runs, base=base)
    dman.tui.walk_directory(dman.mount('runs', base=base))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/runs
    ┣━━ 📄 run-0.npy (152 bytes)
    ┣━━ 📄 run-1.npy (152 bytes)
    ┣━━ 📄 run-2.npy (152 bytes)
    ┗━━ 📄 runs.json (825 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 275-279

Here ``store_subdir=False`` specifies that storables should be stored in 
the root directory of the ``mruns`` object. Usually if your storables create 
more files it is better to set ``store_subdir=True`` instead. Then each
storable is stored in its own directory.

.. GENERATED FROM PYTHON SOURCE LINES 282-287

Model Dictionary
------------------------

Similarly to model lists, ``dman`` also provides the model dictionary :class:`mdict` (:class:`smdict`). 
On a basic level, file names for storables are generated automatically.

.. GENERATED FROM PYTHON SOURCE LINES 287-292

.. code-block:: default


    dct = {'a': a, 'b': b}
    dman.save('dct', dct, base=base)
    dman.tui.walk_directory(dman.mount('dct', base=base), show_content=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/dct
    ┣━━ 📄 39606a62-fd78-4e9a-9df2-c90cbc3f6d3c.npy (152 bytes)
    ┣━━ 📄 3e2d977a-474f-4b79-9ba9-c456f618b180.npy (152 bytes)
    ┗━━ 📄 dct.json (601 bytes)
         ────────────────────────────────────────────────────────────────────────── 
          {                                                                         
            "_ser__type": "_ser__mdict",                                            
            "_ser__content": {                                                      
              "store": {                                                            
                "a": {                                                              
                  "_ser__type": "_ser__record",                                     
                  "_ser__content": {                                                
                    "target": "3e2d977a-474f-4b79-9ba9-c456f618b180.npy",           
                    "sto_type": "_num__barray"                                      
                  }                                                                 
                },                                                                  
                "b": {                                                              
                  "_ser__type": "_ser__record",                                     
                  "_ser__content": {                                                
                    "target": "39606a62-fd78-4e9a-9df2-c90cbc3f6d3c.npy",           
                    "sto_type": "_num__barray"                                      
                  }                                                                 
                }                                                                   
              }                                                                     
            }                                                                       
          }                                                                         
         ────────────────────────────────────────────────────────────────────────── 




.. GENERATED FROM PYTHON SOURCE LINES 293-295

Standard dictionaries are converted to model dictionaries automatically
whenever they contain storables.

.. GENERATED FROM PYTHON SOURCE LINES 295-298

.. code-block:: default

    dct: dman.mdict = dman.load('dct', base=base)
    print(type(dct))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <class 'dman.model.modelclasses.mdict'>




.. GENERATED FROM PYTHON SOURCE LINES 299-300

Similarly to model lists you can access the internal records as follows

.. GENERATED FROM PYTHON SOURCE LINES 300-303

.. code-block:: default

    for k, v in dct.store.items():
        print(k, v)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    a Record(UL[_num__barray], target=3e2d977a-474f-4b79-9ba9-c456f618b180.npy)
    b Record(UL[_num__barray], target=39606a62-fd78-4e9a-9df2-c90cbc3f6d3c.npy)




.. GENERATED FROM PYTHON SOURCE LINES 304-305

You can also specify records directly

.. GENERATED FROM PYTHON SOURCE LINES 305-309

.. code-block:: default

    dct.record('a', c, stem='c')
    dman.save('dct', dct, base=base)
    dman.tui.walk_directory(dman.mount('dct', base=base))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/dct
    ┣━━ 📄 39606a62-fd78-4e9a-9df2-c90cbc3f6d3c.npy (152 bytes)
    ┣━━ 📄 3e2d977a-474f-4b79-9ba9-c456f618b180.npy (152 bytes)
    ┣━━ 📄 c.npy (152 bytes)
    ┗━━ 📄 dct.json (566 bytes)




.. GENERATED FROM PYTHON SOURCE LINES 310-312

Model dictionaries come with some additional settings that can aid in 
automatically generating suitable stems.

.. GENERATED FROM PYTHON SOURCE LINES 312-316

.. code-block:: default


    dct = dman.mdict.from_dict({'a': a, 'b': b, 'c': c}, store_by_key=True, store_subdir=True)
    dman.save('dct2', dct, base=base)
    dman.tui.walk_directory(dman.mount('dct2', base=base))




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    📂 /tmp/tmpj2qbgsf6/cache/example3_models/dct2
    ┣━━ 📂 a
    ┃   ┗━━ 📄 a.npy (152 bytes)
    ┣━━ 📂 b
    ┃   ┗━━ 📄 b.npy (152 bytes)
    ┣━━ 📂 c
    ┃   ┗━━ 📄 c.npy (152 bytes)
    ┗━━ 📄 dct2.json (816 bytes)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.120 seconds)


.. _sphx_glr_download_gallery_fundamentals_example3_models.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: example3_models.py <example3_models.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: example3_models.ipynb <example3_models.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
