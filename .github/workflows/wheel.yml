name: Python Wheels

on:
  push:
  release:
    types: ['released', 'prereleased']

jobs:
  build:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - name: Build
      run: |
        python -m pip install build
        python -m build .
    - name: Upload Wheel
      uses: actions/upload-artifact@v2
      with:
        name: dman-whl-${{ matrix.python-version }}-${{ matrix.os }}
        path: dist/dman-*.whl
    - name: Upload source
      if: ${{ matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'}}
      uses: actions/upload-artifact@v2
      with:
        name: dman-src
        path: dist/dman-*.tar.gz

  test:
    needs: [build]
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - uses: actions/setup-python@v2
      name: Install Python
      with: 
        python-version: ${{ matrix.python-version }}
    - uses: actions/download-artifact@v2
      with:
        name: dman-whl-${{ matrix.python-version }}-${{ matrix.os }}
        path: dist
    - name: Install
      run: python -m pip install --find-links=dist dman
    - name: Test
      run: |
        python -m pip install pytest numpy
        pytest -rP

  release:
    if: ${{ github.event.action == 'released' || github.event.action == 'prereleased' }}
    needs: [test]
    strategy:
      matrix:
        python-version: ['3.10']
        os: ['ubuntu-latest']
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v1
    - uses: actions/download-artifact@v2
      with:
        name: dman-whl-${{ matrix.python-version }}-${{ matrix.os }}
        path: dist
    - name: Install dman
      run: python -m pip install --find-links=dist dman
    - name: Check dman version
      run: |
        [ "${{ github.event.release.tag_name }}" == "$(python -c 'from importlib.metadata import version as v; print(v("dman"))')" ]
      shell: bash
    - name: Install Twine
      run: python -m pip install twine
    - name: Upload Wheel to PyPI
      run: python -m twine upload dist/dman-*.whl
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PyPI }}
    - uses: actions/download-artifact@v2
      with:
        name: dman-src
        path: dist
    - name: Upload source to PyPI
      run: python -m twine upload dist/dman-*.tar.gz
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PyPI }}
